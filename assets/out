#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/cf-functions.sh

working_dir=$1

if [ -z "$working_dir" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/cf-cli-resource-request.XXXXXX)

cat > $payload <&0

api=$(jq -r '.source.api // ""' < $payload)
skip_cert_check=$(jq -r '.source.skip_cert_check // ""' < $payload)
username=$(jq -r '.source.username // ""' < $payload)
password=$(jq -r '.source.password // ""' < $payload)
params=$(jq -r '.params // ""' < $payload)

if [ -z "$api" ]; then
  echo "invalid payload (missing api)"
  exit 1
fi

if [ -z "$username" ]; then
  echo "invalid payload (missing username)"
  exit 1
fi

if [ -z "$password" ]; then
  echo "invalid payload (missing password)"
  exit 1
fi

cd $working_dir

cf_login $api "$username" "$password" $skip_cert_check

commands=$(echo $params | jq -r 'keys_unsorted[]')

for command in $commands; do
  echo "Executing: $command"
  if [ "create_org" = "$command" ]; then
    org=$(echo $params | jq -r '.create_org.org //empty')
    cf_create_org "$org"
  elif [ "delete_org" = "$command" ]; then
    org=$(echo $params | jq -r '.delete_org.org //empty')
    cf_delete_org "$org"
  elif [ "create_space" = "$command" ]; then
    org=$(echo $params | jq -r '.create_space.org //empty')
    space=$(echo $params | jq -r '.create_space.space //empty')
    cf_create_space "$org" "$space"
  elif [ "delete_space" = "$command" ]; then
    org=$(echo $params | jq -r '.delete_space.org //empty')
    space=$(echo $params | jq -r '.delete_space.space //empty')
    cf_delete_space "$org" "$space"
  elif [ "create_service" = "$command" ]; then
    org=$(echo $params | jq -r '.create_service.org //empty')
    space=$(echo $params | jq -r '.create_service.space //empty')
    service=$(echo $params | jq -r '.create_service.service //empty')
    plan=$(echo $params | jq -r '.create_service.plan //empty')
    service_instance=$(echo $params | jq -r '.create_service.service_instance //empty')
    configuration=$(echo $params | jq -r '.create_service.configuration //"{}"')
    tags=$(echo $params | jq -r '.create_service.tags //empty')
    timeout=$(echo $params | jq -r '.create_service.timeout //empty')
    wait=$(echo $params | jq -r '.create_service.wait_for_service //"false"')
    cf_target "$org" "$space"
    cf_create_service "$service" "$plan" "$service_instance" "$configuration" "$tags"
    if [ "true" = "$wait" ]; then
      cf_wait_for_service_instance "$service_instance" "$timeout"
    fi
  elif [ "wait_for_service" = "$command" ]; then
    org=$(echo $params | jq -r '.wait_for_service.org //empty')
    space=$(echo $params | jq -r '.wait_for_service.space //empty')
    service_instance=$(echo $params | jq -r '.wait_for_service.service_instance //empty')
    timeout=$(echo $params | jq -r '.wait_for_service.timeout //empty')
    cf_target "$org" "$space"
    cf_wait_for_service_instance "$service_instance" "$timeout"
  elif [ "delete_service" = "$command" ]; then
    org=$(echo $params | jq -r '.delete_service.org //empty')
    space=$(echo $params | jq -r '.delete_service.space //empty')
    service_instance=$(echo $params | jq -r '.delete_service.service_instance //empty')
    cf_target "$org" "$space"
    cf_delete_service "$service_instance"
  elif [ "push" = "$command" ]; then
    org=$(echo $params | jq -r '.push.org //empty')
    space=$(echo $params | jq -r '.push.space //empty')
    app_name=$(echo $params | jq -r '.push.app_name //empty')
    hostname=$(echo $params | jq -r '.push.hostname //empty')
    memory=$(echo $params | jq -r '.push.memory //empty')
    disk_quota=$(echo $params | jq -r '.push.disk_quota //empty')
    instances=$(echo $params | jq -r '.push.instances //empty')
    path=$(echo $params | jq -r '.push.path //empty')
    buildpack=$(echo $params | jq -r '.push.buildpack //empty')
    no_start=$(echo $params | jq -r '.push.no_start //empty')
    manifest=$(echo $params | jq -r '.push.manifest //empty')

    args=
    [ -n "$app_name" ]   && args="$args $app_name"
    [ -n "$hostname" ]   && args="$args -n $hostname"
    [ -n "$memory" ]     && args="$args -m $memory"
    [ -n "$disk_quota" ] && args="$args -k $disk_quota"
    [ -n "$instances" ]  && args="$args -i $instances"
    [ -n "$path" ]       && args="$args -p $path"
    [ -n "$buildpack" ]  && args="$args -b $buildpack"
    [ -n "$manifest" ]   && args="$args -f $manifest"
    [ -n "$no_start" ]   && args="$args --no-start"

    cf_target "$org" "$space"
    cf_push "$args"
  elif [ "zero_downtime_push" = "$command" ]; then
    org=$(echo $params | jq -r '.zero_downtime_push.org //empty')
    space=$(echo $params | jq -r '.zero_downtime_push.space //empty')
    manifest=$(echo $params | jq -r '.zero_downtime_push.manifest //empty')
    path=$(echo $params | jq -r '.zero_downtime_push.path //empty')
    current_app_name=$(echo $params | jq -r '.zero_downtime_push.current_app_name //empty')

    args="-f $manifest"
    [ -n "$path" ]       && args="$args -p $path"

    cf_target "$org" "$space"
    cf_zero_downtime_push "$args" "$current_app_name"
  elif [ "start" = "$command" ]; then
    org=$(echo $params | jq -r '.start.org //empty')
    space=$(echo $params | jq -r '.start.space //empty')
    app_name=$(echo $params | jq -r '.start.app_name //empty')
    staging_timeout=$(echo $params | jq -r '.start.staging_timeout //"0"')
    startup_timeout=$(echo $params | jq -r '.start.startup_timeout //"0"')
    cf_target "$org" "$space"
    cf_start "$app_name" "$staging_timeout" "$startup_timeout"
  elif [ "delete" = "$command" ]; then
    org=$(echo $params | jq -r '.delete.org //empty')
    space=$(echo $params | jq -r '.delete.space //empty')
    app_name=$(echo $params | jq -r '.delete.app_name //empty')
    delete_mapped_routes=$(echo $params | jq -r '.delete.delete_mapped_routes //empty')
    cf_target "$org" "$space"
    cf_delete "$app_name" "$delete_mapped_routes"
  elif [ "bind_service" = "$command" ]; then
    org=$(echo $params | jq -r '.bind_service.org //empty')
    space=$(echo $params | jq -r '.bind_service.space //empty')
    app_name=$(echo $params | jq -r '.bind_service.app_name //empty')
    service_instance=$(echo $params | jq -r '.bind_service.service_instance //empty')
    configuration=$(echo $params | jq -r '.bind_service.configuration // "{}" //empty')
    cf_target "$org" "$space"
    cf_bind_service "$app_name" "$service_instance" "$configuration"
  fi
done

# todo: metadata
jq -n \
--arg timestamp $(date +%s) \
'{
  version: {
    timestamp: $timestamp
  }
}' >&3
