---
test-params: &test-params
  CCR_CF_SYSTEM_DOMAIN: {{cf-system-domain}}
  CCR_CF_APPS_DOMAIN: {{cf-apps-domain}}
  CCR_CF_SKIP_CERT_CHECK: {{cf-skip-cert-check}}
  CCR_CF_USERNAME: ((cf.username))
  CCR_CF_PASSWORD: ((cf.password))
  CCR_CF_CLIENT_ID: ((cf_client_id))
  CCR_CF_CLIENT_SECRET: ((cf_client_secret))
  CCR_SYNC_SERVICE: {{sync-service}}
  CCR_SYNC_PLAN_1: {{sync-plan-1}}
  CCR_SYNC_PLAN_2: {{sync-plan-2}}
  CCR_SYNC_CONFIGURATION_1: {{sync-configuration-1}}
  CCR_SYNC_CONFIGURATION_2: {{sync-configuration-2}}
  CCR_ASYNC_SERVICE: {{async-service}}
  CCR_ASYNC_PLAN_1: {{async-plan-1}}
  CCR_ASYNC_PLAN_2: {{async-plan-2}}
  CCR_ASYNC_CONFIGURATION_1: {{async-configuration-1}}
  CCR_ASYNC_CONFIGURATION_2: {{async-configuration-2}}
  CCR_SHARE_SERVICE: {{share-service}}
  CCR_SHARE_PLAN: {{share-plan}}
  CCR_SHARE_CONFIGURATION: {{share-configuration}}
  CCR_DOCKER_PRIVATE_IMAGE: {{docker-private-image}}
  CCR_DOCKER_PRIVATE_USERNAME: ((docker-private.username))
  CCR_DOCKER_PRIVATE_PASSWORD: ((docker-private.password))
  CCR_SERVICE_KEY_SERVICE: {{service-key-service}}
  CCR_SERVICE_KEY_PLAN: {{service-key-plan}}

test-jobs: &test-jobs
- app-tests
- auth-tests
- buildpack-tests
- command-file-tests
- network-policy-tests
- route-tests
- service-broker-tests
- service-tests
- user-tests
- validation-tests

jobs:
- name: setup
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: project
      resource: cf-cli-resource
      passed: [build]
    - get: cf-cli-resource-image-rc
      passed: [build]
    - get: test-app-docker-public
      params: {format: oci}
  - in_parallel:
    - task: setup
      file: project/ci/task.yml
      image: cf-cli-resource-image-rc
      params:
        <<: *test-params
        TEST_SCRIPT: setup
    - put: test-app-docker-private
      params: {image: test-app-docker-public/image.tar}

- name: cleanup-failed-tests
  public: true
  serial: true
  plan:
  - get: project
    resource: cf-cli-resource
    passed: [build]
  - get: cf-cli-resource-image-rc
    passed: [build]
  - task: cleanup-failed-tests
    file: project/ci/task.yml
    image: cf-cli-resource-image-rc
    params:
      <<: *test-params
      TEST_SCRIPT: cleanup-failed-tests

- name: build
  public: true
  serial_groups: [version]
  plan:
  - in_parallel:
    - get: cf-cli-resource
      trigger: true
    - get: version
      params: {pre: rc}
  - put: version
    params: {file: version/version}
  - put: cf-cli-resource-image-rc
    params:
      build: cf-cli-resource
      tag: version/version
      tag_as_latest: false

- name: app-tests
  public: true
  plan:
  - in_parallel:
    - get: project
      resource: cf-cli-resource
      passed: [build]
    - get: cf-cli-resource-image-rc
      trigger: true
      passed: [build]
    - get: version
      passed: [build]
  - in_parallel:
    - task: run-app-push-tests
      file: project/ci/task.yml
      image: cf-cli-resource-image-rc
      params:
        <<: *test-params
        TEST_SCRIPT: run-app-push-tests
    - task: run-app-tests
      file: project/ci/task.yml
      image: cf-cli-resource-image-rc
      params:
        <<: *test-params
        TEST_SCRIPT: run-app-tests
    - task: run-app-zero-downtime-push-tests
      file: project/ci/task.yml
      image: cf-cli-resource-image-rc
      params:
        <<: *test-params
        TEST_SCRIPT: run-app-zero-downtime-push-tests
    - task: run-docker-tests
      file: project/ci/task.yml
      image: cf-cli-resource-image-rc
      params:
        <<: *test-params
        TEST_SCRIPT: run-docker-tests
    - task: run-task-tests
      file: project/ci/task.yml
      image: cf-cli-resource-image-rc
      params:
        <<: *test-params
        TEST_SCRIPT: run-task-tests

- name: auth-tests
  public: true
  plan:
  - in_parallel:
    - get: project
      resource: cf-cli-resource
      passed: [build]
    - get: cf-cli-resource-image-rc
      trigger: true
      passed: [build]
    - get: version
      passed: [build]
  - in_parallel:
    - task: run-auth-client-credentials-tests
      file: project/ci/task.yml
      image: cf-cli-resource-image-rc
      params:
        <<: *test-params
        TEST_SCRIPT: run-auth-client-credentials-tests
    - task: run-auth-origin-tests
      file: project/ci/task.yml
      image: cf-cli-resource-image-rc
      params:
        <<: *test-params
        TEST_SCRIPT: run-auth-origin-tests

- name: buildpack-tests
  public: true
  plan:
  - in_parallel:
    - get: project
      resource: cf-cli-resource
      passed: [build]
    - get: cf-cli-resource-image-rc
      trigger: true
      passed: [build]
    - get: version
      passed: [build]
  - task: run-buildpack-tests
    file: project/ci/task.yml
    image: cf-cli-resource-image-rc
    params:
      <<: *test-params
      TEST_SCRIPT: run-buildpack-tests

- name: command-file-tests
  public: true
  plan:
  - in_parallel:
    - get: project
      resource: cf-cli-resource
      passed: [build]
    - get: cf-cli-resource-image-rc
      trigger: true
      passed: [build]
    - get: version
      passed: [build]
  - task: run-file-tests
    file: project/ci/task.yml
    image: cf-cli-resource-image-rc
    params:
      <<: *test-params
      TEST_SCRIPT: run-file-tests

- name: network-policy-tests
  public: true
  plan:
  - in_parallel:
    - get: project
      resource: cf-cli-resource
      passed: [build]
    - get: cf-cli-resource-image-rc
      trigger: true
      passed: [build]
    - get: version
      passed: [build]
  - task: run-network-policy-tests
    file: project/ci/task.yml
    image: cf-cli-resource-image-rc
    params:
      <<: *test-params
      TEST_SCRIPT: run-network-policy-tests

- name: route-tests
  public: true
  plan:
  - in_parallel:
    - get: project
      resource: cf-cli-resource
      passed: [build]
    - get: cf-cli-resource-image-rc
      trigger: true
      passed: [build]
    - get: version
      passed: [build]
    - get: logging-route-service
  - in_parallel:
    - task: run-route-service-tests
      file: project/ci/task.yml
      image: cf-cli-resource-image-rc
      params:
        <<: *test-params
        TEST_SCRIPT: run-route-service-tests
    - task: run-route-service-tests
      file: project/ci/task.yml
      image: cf-cli-resource-image-rc
      params:
        <<: *test-params
        TEST_SCRIPT: run-route-tests

- name: service-broker-tests
  public: true
  plan:
  - in_parallel:
    - get: project
      resource: cf-cli-resource
      passed: [build]
    - get: cf-cli-resource-image-rc
      trigger: true
      passed: [build]
    - get: version
      passed: [build]
    - get: service-broker
  - task: run-service-broker-tests
    file: project/ci/task.yml
    image: cf-cli-resource-image-rc
    params:
      <<: *test-params
      TEST_SCRIPT: run-service-broker-tests

- name: service-tests
  public: true
  plan:
  - in_parallel:
    - get: project
      resource: cf-cli-resource
      passed: [build]
    - get: cf-cli-resource-image-rc
      trigger: true
      passed: [build]
    - get: version
      passed: [build]
  - in_parallel:
    - task: run-asynchronous-service-tests
      file: project/ci/task.yml
      image: cf-cli-resource-image-rc
      params:
        <<: *test-params
        TEST_SCRIPT: run-asynchronous-service-tests
    - task: run-share-service-tests
      file: project/ci/task.yml
      image: cf-cli-resource-image-rc
      params:
        <<: *test-params
        TEST_SCRIPT: run-share-service-tests
    - task: run-service-key-tests
      file: project/ci/task.yml
      image: cf-cli-resource-image-rc
      params:
        <<: *test-params
        TEST_SCRIPT: run-service-key-tests
    - task: run-synchronous-service-tests
      file: project/ci/task.yml
      image: cf-cli-resource-image-rc
      params:
        <<: *test-params
        TEST_SCRIPT: run-synchronous-service-tests
    - task: run-user-provided-service-tests
      file: project/ci/task.yml
      image: cf-cli-resource-image-rc
      params:
        <<: *test-params
        TEST_SCRIPT: run-user-provided-service-tests

- name: user-tests
  public: true
  plan:
  - in_parallel:
    - get: project
      resource: cf-cli-resource
      passed: [build]
    - get: cf-cli-resource-image-rc
      trigger: true
      passed: [build]
    - get: version
      passed: [build]
  - task: run-user-tests
    file: project/ci/task.yml
    image: cf-cli-resource-image-rc
    params:
      <<: *test-params
      TEST_SCRIPT: run-user-tests

- name: validation-tests
  public: true
  plan:
  - in_parallel:
    - get: project
      resource: cf-cli-resource
      passed: [build]
    - get: cf-cli-resource-image-rc
      trigger: true
      passed: [build]
    - get: version
      passed: [build]
  - task: run-validation-tests
    file: project/ci/task.yml
    image: cf-cli-resource-image-rc
    params:
      <<: *test-params
      TEST_SCRIPT: run-validation-tests

- name: shipit
  public: true
  serial_groups: [version]
  plan:
  - in_parallel:
    - get: project
      resource: cf-cli-resource
      passed: *test-jobs
    - get: cf-cli-resource-image-rc
      passed: *test-jobs
      params: {save: true}
    - get: version
      passed: *test-jobs
      params: {bump: final}
    - get: pipeline-tasks
  - task: generate-github-release
    file: pipeline-tasks/generate-github-release/task.yml
    output_mapping: {task-output: generate-github-release-output}
  - task: generate-commitish
    file: pipeline-tasks/generate-commitish/task.yml
    output_mapping: {task-output: generate-commitish-output}
  - task: generate-release-notes
    file: pipeline-tasks/generate-release-notes-from-changelog/task.yml
    input_mapping: {task-input: project}
    output_mapping: {task-output: generate-release-notes-output}
  - put: github-release
    params:
      name: generate-github-release-output/release-name
      tag: generate-github-release-output/release-tag
      commitish: generate-commitish-output/commitish
      body: generate-release-notes-output/RELEASE_NOTES.md
  - put: version
    params: {file: version/version}
  - put: cf-cli-resource-image-final
    params:
      load: cf-cli-resource-image-rc
      tag: version/version
      tag_as_latest: true

- name: major
  public: true
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: major, pre: rc}
  - put: version
    params: {file: version/version}

- name: minor
  public: true
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: minor, pre: rc}
  - put: version
    params: {file: version/version}

- name: patch
  public: true
  serial_groups: [version]
  plan:
  - get: version
    passed: [shipit]
    params: {bump: patch, pre: rc}
    trigger: true
  - put: version
    params: {file: version/version}

resources:
- name: cf-cli-resource
  type: git
  icon: github-circle
  source:
    uri: {{git-uri}}
    branch: {{git-branch}}
    private_key: ((git_key.private_key))
    ignore_paths:
    - LICENSE
    - NOTICE.md
    - pipeline.yml
    - README.md
    - examples

- name: version
  type: semver
  icon: tag
  source:
    driver: git
    initial_version: 1.0.0-rc.0
    uri: {{git-uri-semver}}
    branch: version
    file: version
    private_key: ((git_key.private_key))

- name: cf-cli-resource-image-rc
  type: docker-image
  icon: docker
  source:
    repository: {{docker-repository-rc}}
    username: ((docker.username))
    password: ((docker.password))

- name: cf-cli-resource-image-final
  type: docker-image
  icon: docker
  source:
    repository: {{docker-repository-final}}
    username: ((docker.username))
    password: ((docker.password))

- name: pipeline-tasks
  type: git
  icon: github-circle
  source:
    uri: {{pipeline-tasks-git-uri}}
    branch: {{pipeline-tasks-git-branch}}

- name: github-release
  type: github-release
  icon: package-variant-closed
  source:
    owner: {{github-release-user}}
    repository: cf-cli-resource
    access_token: ((github_access_token))

- name: service-broker
  type: file-url
  icon: file
  source:
    url: https://github.com/mattmcneeney/overview-broker/archive/master.zip
    filename: overview-broker.zip

- name: logging-route-service
  type: file-url
  icon: file
  source:
    url: https://github.com/nulldriver/logging-route-service/archive/master.zip
    filename: logging-route-service.zip

- name: test-app-docker-public
  type: registry-image
  icon: docker
  source:
    repository: nulldriver/test-app

- name: test-app-docker-private
  type: registry-image
  icon: docker
  source:
    repository: docker.nulldriver.com/test-app
    username: ((docker-private.username))
    password: ((docker-private.password))

resource_types:
- name: file-url
  type: registry-image
  source:
    repository: pivotalservices/concourse-curl-resource
    tag: latest
