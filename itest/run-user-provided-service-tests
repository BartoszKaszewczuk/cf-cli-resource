#!/bin/bash

set -eu
set -o pipefail

test_dir=$(dirname $0)

source $test_dir/config.sh
source $test_dir/helpers.sh
source $test_dir/assert.sh

it_can_create_a_user_provided_service_with_credentials_string() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg service_instance "$3" \
  --arg credentials '{"username":"admin","password":"pa55woRD"}' \
  '{
    command: "create-user-provided-service",
    org: $org,
    space: $space,
    service_instance: $service_instance,
    credentials: $credentials
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::success cf_service_exists "$3"
}

it_can_create_a_user_provided_service_with_credentials_file() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  mkdir -p $working_dir/input

  echo \
  '{
    "username": "admin",
    "password": "pa55woRD"
  }' > $working_dir/input/credentials.json

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg service_instance "$3" \
  --arg credentials 'input/credentials.json' \
  '{
    command: "create-user-provided-service",
    org: $org,
    space: $space,
    service_instance: $service_instance,
    credentials: $credentials
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::success cf_service_exists "$3"
}

it_can_create_a_user_provided_service_with_syslog() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg service_instance "$3" \
  --arg syslog_drain_url "syslog://example.com" \
  '{
    command: "create-user-provided-service",
    org: $org,
    space: $space,
    service_instance: $service_instance,
    syslog_drain_url: $syslog_drain_url
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::success cf_service_exists "$3"
}

org=$(generate_test_name_with_spaces "Org")
space=$(generate_test_name_with_spaces "Space")
app_name=$(generate_test_name_with_spaces "App")

credentials_string_si=$(generate_test_name_with_spaces "cups credentials string")
credentials_file_si=$(generate_test_name_with_spaces "cups credentials file")
syslog_si=$(generate_test_name_with_spaces "cups syslog")
route_si=$(generate_test_name_with_spaces "cups route")
route_service_url="https://example.com"

setup_integration_tests "$org" "$space"

run it_can_push_an_app \"$org\" \"$space\" \"$app_name\"

# run first to create the ups, then again to update the ups
run it_can_create_a_user_provided_service_with_credentials_string \"$org\" \"$space\" \"$credentials_string_si\"
run it_can_create_a_user_provided_service_with_credentials_string \"$org\" \"$space\" \"$credentials_string_si\"

run it_can_create_a_user_provided_service_with_credentials_file \"$org\" \"$space\" \"$credentials_file_si\"
run it_can_create_a_user_provided_service_with_credentials_file \"$org\" \"$space\" \"$credentials_file_si\"

run it_can_create_a_user_provided_service_with_syslog \"$org\" \"$space\" \"$syslog_si\"
run it_can_create_a_user_provided_service_with_syslog \"$org\" \"$space\" \"$syslog_si\"

run it_can_create_a_user_provided_service_with_route \"$org\" \"$space\" \"$route_si\" \"$route_service_url\"
run it_can_create_a_user_provided_service_with_route \"$org\" \"$space\" \"$route_si\" \"$route_service_url\"

run it_can_bind_a_service \"$org\" \"$space\" \"$app_name\" \"$credentials_string_si\"
run it_can_bind_a_service \"$org\" \"$space\" \"$app_name\" \"$credentials_file_si\"
run it_can_bind_a_service \"$org\" \"$space\" \"$app_name\" \"$syslog_si\"
run it_can_bind_a_service \"$org\" \"$space\" \"$app_name\" \"$route_si\"

run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"

teardown_integration_tests "$org" "$space"
