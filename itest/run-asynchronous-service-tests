#!/bin/bash

set -eu
set -o pipefail

test_dir=$(dirname $0)

source $test_dir/assert.sh
source $test_dir/helpers.sh
source $test_dir/config.sh

it_can_wait_for_service() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local service_instance=${3:?service_instance null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg service_instance "$service_instance" \
  '{
    command: "wait-for-service",
    org: $org,
    space: $space,
    service_instance: $service_instance
  }')

  put_with_params "$source" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_service_exists "$service_instance"
}

it_can_create_a_service_that_does_not_exist() {
  it_can_create_a_service "$@"
}

it_can_create_a_service_that_already_exists() {
  it_can_create_a_service "$@"
}

it_can_create_a_service_that_already_exists_and_update_with_changes() {
  it_can_create_a_service "$@"
}

it_can_create_a_service_that_already_exists_and_update_without_changes() {
  it_can_create_a_service "$@"
}

org=$(generate_test_name_with_spaces "Org")
space=$(generate_test_name_with_spaces "Space")
app_name=$(generate_test_name_with_spaces "App")

service=$CCR_ASYNC_SERVICE
plan_1=$CCR_ASYNC_PLAN_1
plan_2=$CCR_ASYNC_PLAN_2
service_instance=$(generate_test_name_with_spaces "Async Service")
configuration_1=$CCR_ASYNC_CONFIGURATION_1
configuration_2=$CCR_ASYNC_CONFIGURATION_2
tags="list, of, tags"
wait_for_service="true"
update_service="true"

setup_integration_tests "$org" "$space"

run it_can_create_a_service_that_does_not_exist \"$org\" \"$space\" \"$service\" \"$plan_1\" \"$service_instance\" \"$configuration_1\"
run it_can_wait_for_service \"$org\" \"$space\" \"$service_instance\"

run it_can_create_a_service_that_already_exists \"$org\" \"$space\" \"$service\" \"$plan_1\" \"$service_instance\" \"$configuration_1\"
run it_can_create_a_service_that_already_exists_and_update_with_changes \"$org\" \"$space\" \"$service\" \"$plan_2\" \"$service_instance\" \"$configuration_2\" \"$wait_for_service\" \"$update_service\"
run it_can_create_a_service_that_already_exists_and_update_without_changes \"$org\" \"$space\" \"$service\" \"$plan_2\" \"$service_instance\" \"$configuration_2\" \"$wait_for_service\" \"$update_service\"

run it_can_update_a_service \"$org\" \"$space\" \"$service_instance\" \"$plan_1\" \"$configuration_1\" \"$tags\" \"$wait_for_service\"

run it_can_push_an_app \"$org\" \"$space\" \"$app_name\"

run it_can_bind_a_service \"$org\" \"$space\" \"$app_name\" \"$service_instance\"
run it_can_unbind_a_service \"$org\" \"$space\" \"$app_name\" \"$service_instance\"
run it_can_delete_a_service \"$org\" \"$space\" \"$service_instance\"

run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"

teardown_integration_tests "$org" "$space"
