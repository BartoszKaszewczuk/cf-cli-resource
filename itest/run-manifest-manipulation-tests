#!/bin/bash

set -eu
set -o pipefail

base_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)

source "$base_dir/itest/lib/assert.sh"
source "$base_dir/itest/lib/helpers.sh"

it_can_set_env_on_application_with_app_name() {
  local app_name=${1:?app_name null or not set}

  local manifest=$(mktemp $TMPDIR/manifest.XXXXXX)
  yq new "applications[+].name" "$app_name" > "$manifest"
  yq write -i "$manifest" "applications(name==$app_name).path" "some/path"

  local environment_variables=$(jq -n '{
    key1: "value1",
    key2: "value2"
  }')

  cf::set_manifest_environment_variables "$manifest" "$environment_variables" "$app_name"

  cat "$manifest"

  assert::equals "some/path" "$(yq read "$manifest" "applications(name==$app_name).path")"
  assert::equals "value1" "$(yq read "$manifest" "applications(name==$app_name).env.key1")"
  assert::equals "value2" "$(yq read "$manifest" "applications(name==$app_name).env.key2")"
}

it_can_set_env_on_application_without_app_name() {
  local app_name=${1:?app_name null or not set}

  local manifest=$(mktemp $TMPDIR/manifest.XXXXXX)
  yq new "applications[+].path" "some/path" > "$manifest"

  local environment_variables=$(jq -n '{
    key1: "value1",
    key2: "value2"
  }')

  cf::set_manifest_environment_variables "$manifest" "$environment_variables" "$app_name"

  cat "$manifest"

  assert::equals "some/path" "$(yq read "$manifest" "applications[0].path")"
  assert::equals "value1" "$(yq read "$manifest" "applications[0].env.key1")"
  assert::equals "value2" "$(yq read "$manifest" "applications[0].env.key2")"
}

it_can_set_env_as_deprecated_global_attribute() {
  local app_name=${1:?app_name null or not set}

  local manifest=$(mktemp $TMPDIR/manifest.XXXXXX)
  yq new "applications[+].path" "some/path" > "$manifest"
  yq write -i "$manifest" "applications[+].path" "other/path"

  local environment_variables=$(jq -n '{
    key1: "value1",
    key2: "value2"
  }')

  cf::set_manifest_environment_variables "$manifest" "$environment_variables" "$app_name"

  cat "$manifest"

  assert::equals "value1" "$(yq read "$manifest" 'env.key1')"
  assert::equals "value2" "$(yq read "$manifest" 'env.key2')"
}

app_name=$(generate_test_name_with_spaces "App")

run it_can_set_env_on_application_with_app_name \"$app_name\"
run it_can_set_env_on_application_without_app_name \"$app_name\"
run it_can_set_env_as_deprecated_global_attribute \"$app_name\"
