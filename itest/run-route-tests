#!/bin/bash

set -eu
set -o pipefail

test_dir=$(dirname $0)

source $test_dir/helpers.sh
source $test_dir/config.sh

it_can_create_a_domain() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg domain "$domain" \
  '{
    command: "create-domain",
    org: $org,
    domain: $domain
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  cf_has_private_domain "$org" "$domain"
}

it_can_delete_a_domain() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg domain "$domain" \
  '{
    command: "delete-domain",
    org: $org,
    domain: $domain
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  ! cf_has_private_domain "$org" "$domain"
}

it_can_map_a_route() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg domain "$domain" \
  '{
    command: "map-route",
    org: $org,
    space: $space,
    app_name: $app_name,
    domain: $domain
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '
  # TODO: check that the route was mapped
}

it_can_map_a_route_with_hostname() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg domain "$domain" \
  --arg hostname "$app_name" \
  '{
    command: "map-route",
    org: $org,
    space: $space,
    app_name: $app_name,
    domain: $domain,
    hostname: $hostname
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '
  # TODO: check that the route was mapped
}

it_can_map_a_route_with_hostname_and_path() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg domain "$domain" \
  --arg hostname "$app_name" \
  --arg path "foo" \
  '{
    command: "map-route",
    org: $org,
    space: $space,
    app_name: $app_name,
    domain: $domain,
    hostname: $hostname,
    path: $path
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '
  # TODO: check that the route was mapped
}

it_can_unmap_a_route_with_hostname_and_path() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg domain "$domain" \
  --arg hostname "$app_name" \
  --arg path "foo" \
  '{
    command: "unmap-route",
    org: $org,
    space: $space,
    app_name: $app_name,
    domain: $domain,
    hostname: $hostname,
    path: $path
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '
  # TODO: check that the route was unmapped
}

it_can_unmap_a_route_with_hostname() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg domain "$domain" \
  --arg hostname "$app_name" \
  '{
    command: "unmap-route",
    org: $org,
    space: $space,
    app_name: $app_name,
    domain: $domain,
    hostname: $hostname
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '
  # TODO: check that the route was unmapped
}

it_can_unmap_a_route() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg domain "$domain" \
  '{
    command: "unmap-route",
    org: $org,
    space: $space,
    app_name: $app_name,
    domain: $domain
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '
  # TODO: check that the route was unmapped
}

setup_integration_tests

run it_can_push_an_app

run it_can_create_a_domain

run it_can_map_a_route
run it_can_map_a_route_with_hostname
run it_can_map_a_route_with_hostname_and_path

run it_can_unmap_a_route_with_hostname_and_path
run it_can_unmap_a_route_with_hostname
run it_can_unmap_a_route

run it_can_delete_a_domain

run it_can_delete_an_app

teardown_integration_tests
