#!/bin/bash

set -eu
set -o pipefail

test_dir=$(dirname $0)

source $test_dir/helpers.sh
source $test_dir/config.sh

it_can_create_a_domain() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg domain "$2" \
  '{
    command: "create-domain",
    org: $org,
    domain: $domain
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  cf_has_private_domain "$1" "$2"
}

it_can_delete_a_domain() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg domain "$2" \
  '{
    command: "delete-domain",
    org: $org,
    domain: $domain
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  ! cf_has_private_domain "$1" "$2"
}

it_can_map_a_route() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg domain "$domain" \
  '{
    command: "map-route",
    org: $org,
    space: $space,
    app_name: $app_name,
    domain: $domain
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '
  # TODO: check that the route was mapped
}

it_can_map_a_route_with_hostname() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg app_name "$3" \
  --arg domain "$4" \
  --arg hostname "$(app_to_hostname "$3")" \
  '{
    command: "map-route",
    org: $org,
    space: $space,
    app_name: $app_name,
    domain: $domain,
    hostname: $hostname
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '
  # TODO: check that the route was mapped
}

it_can_map_a_route_with_hostname_and_path() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg app_name "$3" \
  --arg domain "$4" \
  --arg hostname "$(app_to_hostname "$3")" \
  --arg path "foo" \
  '{
    command: "map-route",
    org: $org,
    space: $space,
    app_name: $app_name,
    domain: $domain,
    hostname: $hostname,
    path: $path
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '
  # TODO: check that the route was mapped
}

it_can_unmap_a_route_with_hostname_and_path() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg app_name "$3" \
  --arg domain "$4" \
  --arg hostname "$(app_to_hostname "$3")" \
  --arg path "foo" \
  '{
    command: "unmap-route",
    org: $org,
    space: $space,
    app_name: $app_name,
    domain: $domain,
    hostname: $hostname,
    path: $path
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '
  # TODO: check that the route was unmapped
}

it_can_unmap_a_route_with_hostname() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg app_name "$3" \
  --arg domain "$4" \
  --arg hostname "$(app_to_hostname "$3")" \
  '{
    command: "unmap-route",
    org: $org,
    space: $space,
    app_name: $app_name,
    domain: $domain,
    hostname: $hostname
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '
  # TODO: check that the route was unmapped
}

it_can_unmap_a_route() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg app_name "$3" \
  --arg domain "$4" \
  '{
    command: "unmap-route",
    org: $org,
    space: $space,
    app_name: $app_name,
    domain: $domain
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '
  # TODO: check that the route was unmapped
}

org=$(generate_test_name_with_spaces "Org")
space=$(generate_test_name_with_spaces "Space")
app_name=$(generate_test_name_with_spaces "App")
domain="$(generate_test_name_with_hyphens "domain").com"

setup_integration_tests "$org" "$space"

run it_can_push_an_app \"$org\" \"$space\" \"$app_name\"

run it_can_create_a_domain \"$org\" \"$domain\"

run it_can_map_a_route \"$org\" \"$space\" \"$app_name\" \"$domain\"
run it_can_map_a_route_with_hostname \"$org\" \"$space\" \"$app_name\" \"$domain\"
run it_can_map_a_route_with_hostname_and_path \"$org\" \"$space\" \"$app_name\" \"$domain\"

run it_can_unmap_a_route_with_hostname_and_path \"$org\" \"$space\" \"$app_name\" \"$domain\"
run it_can_unmap_a_route_with_hostname \"$org\" \"$space\" \"$app_name\" \"$domain\"
run it_can_unmap_a_route \"$org\" \"$space\" \"$app_name\" \"$domain\"

run it_can_delete_a_domain \"$org\" \"$domain\"

run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"

teardown_integration_tests "$org" "$space"
