#!/bin/bash

set -eu
set -o pipefail

test_dir=$(dirname $0)

source $test_dir/assert.sh
source $test_dir/helpers.sh
source $test_dir/config.sh

it_can_push_an_app_no_start() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  create_static_app "$3" "$working_dir"

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg app_name "$3" \
  '{
    command: "push",
    org: $org,
    space: $space,
    app_name: $app_name,
    hostname: $app_name,
    path: "static-app/content",
    manifest: "static-app/manifest.yml",
    no_start: "true"
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::success cf_is_app_stopped "$3"
}

it_can_start_an_app() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg app_name "$3" \
  '{
    command: "start",
    org: $org,
    space: $space,
    app_name: $app_name,
    staging_timeout: 15,
    startup_timeout: 5
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::success cf_is_app_started "$3"
}

it_can_stop_an_app() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg app_name "$3" \
  '{
    command: "stop",
    org: $org,
    space: $space,
    app_name: $app_name
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '
  assert::success cf_is_app_stopped "$3"
}

it_can_zero_downtime_push() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  create_static_app "$app_name" "$working_dir"

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg app_name "$3" \
  '{
    command: "zero-downtime-push",
    org: $org,
    space: $space,
    manifest: "static-app/manifest.yml",
    current_app_name: $app_name,
    environment_variables: {
      key: "value",
      key2: "value2"
    }
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::success cf_is_app_started "$3"
}

it_can_scale_an_app_instances() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg app_name "$3" \
  --arg instances "2" \
  '{
    command: "scale",
    org: $org,
    space: $space,
    app_name: $app_name,
    instances: $instances
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::equals 2 "$(cf_get_app_instances "$3")"
}

it_can_scale_an_app_disk_quota() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg app_name "$3" \
  --arg disk_quota "512M" \
  '{
    command: "scale",
    org: $org,
    space: $space,
    app_name: $app_name,
    disk_quota: $disk_quota
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::equals 512 "$(cf_get_app_disk_quota "$3")"
}

it_can_scale_an_app_memory() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg app_name "$3" \
  --arg memory "512M" \
  '{
    command: "scale",
    org: $org,
    space: $space,
    app_name: $app_name,
    memory: $memory
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::equals 512 "$(cf_get_app_memory "$3")"
}

it_can_scale_an_app() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg app_name "$3" \
  --arg instances "1" \
  --arg disk_quota "1G" \
  --arg memory "1G" \
  '{
    command: "scale",
    org: $org,
    space: $space,
    app_name: $app_name,
    instances: $instances,
    disk_quota: $disk_quota,
    memory: $memory
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::equals 1 "$(cf_get_app_instances "$3")"
  assert::equals 1024 "$(cf_get_app_disk_quota "$3")"
  assert::equals 1024 "$(cf_get_app_memory "$3")"
}

it_can_restart_an_app() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg app_name "$3" \
  '{
    command: "restart",
    org: $org,
    space: $space,
    app_name: $app_name,
    staging_timeout: 15,
    startup_timeout: 5
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::success cf_is_app_started "$3"
}

it_can_restage_an_app() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg app_name "$3" \
  '{
    command: "restage",
    org: $org,
    space: $space,
    app_name: $app_name,
    staging_timeout: 15,
    startup_timeout: 5
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::success cf_is_app_started "$3"
}

org=$(generate_org_name)
space=$(generate_space_name)
app_name=$(generate_app_name)

setup_integration_tests "$org" "$space"

run it_can_push_an_app_no_start \"$org\" \"$space\" \"$app_name\"
run it_can_start_an_app \"$org\" \"$space\" \"$app_name\"
run it_can_stop_an_app \"$org\" \"$space\" \"$app_name\"
run it_can_zero_downtime_push \"$org\" \"$space\" \"$app_name\"

run it_can_scale_an_app_instances \"$org\" \"$space\" \"$app_name\"
run it_can_scale_an_app_disk_quota \"$org\" \"$space\" \"$app_name\"
run it_can_scale_an_app_memory \"$org\" \"$space\" \"$app_name\"
run it_can_scale_an_app \"$org\" \"$space\" \"$app_name\"

run it_can_restart_an_app \"$org\" \"$space\" \"$app_name\"
run it_can_restage_an_app \"$org\" \"$space\" \"$app_name\"

run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"

teardown_integration_tests "$org" "$space"
