#!/bin/bash

set -eu
set -o pipefail

test_dir=$(dirname $0)

source $test_dir/helpers.sh
source $test_dir/config.sh

it_can_enable_diego_docker() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "enable-feature-flag",
    feature_name: "diego_docker"
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  cf_is_feature_flag_enabled "diego_docker"
}

it_can_push_a_docker_image_from_a_private_registry() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local app_name=docker-$app_name

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg docker_image "$docker_private_image" \
  --arg docker_username "$docker_private_username" \
  --arg docker_password "$docker_private_password" \
  '{
    command: "push",
    org: $org,
    space: $space,
    app_name: $app_name,
    hostname: $app_name,
    docker_image: $docker_image,
    docker_username: $docker_username,
    docker_password: $docker_password
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  cf_is_app_started "$app_name"
}

it_can_push_an_app_no_start() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  create_static_app "$app_name" "$working_dir"

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "push",
    org: $org,
    space: $space,
    app_name: $app_name,
    hostname: $app_name,
    path: "static-app/content",
    manifest: "static-app/manifest.yml",
    no_start: "true"
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  cf_is_app_stopped "$app_name"
}

it_can_start_an_app() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "start",
    org: $org,
    space: $space,
    app_name: $app_name,
    staging_timeout: 15,
    startup_timeout: 5
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  cf_is_app_started "$app_name"
}

it_can_stop_an_app() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "stop",
    org: $org,
    space: $space,
    app_name: $app_name
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '
  cf_is_app_stopped "$app_name"
}

it_can_zero_downtime_push() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  create_static_app "$app_name" "$working_dir"

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "zero-downtime-push",
    org: $org,
    space: $space,
    manifest: "static-app/manifest.yml",
    current_app_name: $app_name,
    environment_variables: {
      key: "value",
      key2: "value2"
    }
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  cf_is_app_started "$app_name"
}

it_can_scale_an_app_instances() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg instances "2" \
  '{
    command: "scale",
    org: $org,
    space: $space,
    app_name: $app_name,
    instances: $instances
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert_equals 2 "$(cf_get_app_instances "$app_name")"
}

it_can_scale_an_app_disk_quota() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg disk_quota "512M" \
  '{
    command: "scale",
    org: $org,
    space: $space,
    app_name: $app_name,
    disk_quota: $disk_quota
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert_equals 512 "$(cf_get_app_disk_quota "$app_name")"
}

it_can_scale_an_app_memory() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg memory "512M" \
  '{
    command: "scale",
    org: $org,
    space: $space,
    app_name: $app_name,
    memory: $memory
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert_equals 512 "$(cf_get_app_memory "$app_name")"
}

it_can_scale_an_app() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg instances "1" \
  --arg disk_quota "1G" \
  --arg memory "1G" \
  '{
    command: "scale",
    org: $org,
    space: $space,
    app_name: $app_name,
    instances: $instances,
    disk_quota: $disk_quota,
    memory: $memory
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert_equals 1 "$(cf_get_app_instances "$app_name")"
  assert_equals 1024 "$(cf_get_app_disk_quota "$app_name")"
  assert_equals 1024 "$(cf_get_app_memory "$app_name")"
}

it_can_restart_an_app() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "restart",
    org: $org,
    space: $space,
    app_name: $app_name,
    staging_timeout: 15,
    startup_timeout: 5
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  cf_is_app_started "$app_name"
}

it_can_restage_an_app() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "restage",
    org: $org,
    space: $space,
    app_name: $app_name,
    staging_timeout: 15,
    startup_timeout: 5
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  cf_is_app_started "$app_name"
}

setup_integration_tests

run it_can_enable_diego_docker
run it_can_push_a_docker_image_from_a_private_registry

run it_can_push_an_app_no_start
run it_can_start_an_app
run it_can_stop_an_app
run it_can_zero_downtime_push

run it_can_scale_an_app_instances
run it_can_scale_an_app_disk_quota
run it_can_scale_an_app_memory
run it_can_scale_an_app

run it_can_restart_an_app
run it_can_restage_an_app

run it_can_delete_an_app

teardown_integration_tests
