#!/bin/bash

set -eu
set -o pipefail

test_dir=$(dirname $0)

source $test_dir/assert.sh
source $test_dir/helpers.sh
source $test_dir/config.sh

it_can_push_an_app_no_start_with_file() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  create_static_app "$app_name" "$working_dir"

  mkdir "$working_dir/file-tests"
  cat > "$working_dir/file-tests/commands.yml" <<-EOF
command: push
org: $org
space: $space
app_name: $app_name
path: static-*/content
manifest: static-app/manifest.yml
no_start: true
EOF

  local params=$(jq -n \
  --arg command_file "file-tests/commands.yml" \
  '{
    command: "invalid-XXXXXX",
    command_file: $command_file
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_is_app_stopped "$app_name"
}

it_can_start_an_app_with_file() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  mkdir "$working_dir/file-tests"
  cat > "$working_dir/file-tests/commands.yml" <<-EOF
command: start
org: $org
space: $space
app_name: $app_name
staging_timeout: 15
startup_timeout: 5
EOF

  local params=$(jq -n \
  --arg command_file "file-tests/commands.yml" \
  '{
    command: "invalid-XXXXXX",
    command_file: $command_file
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_is_app_started "$app_name"
}

it_can_stop_an_app_with_file() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  mkdir "$working_dir/file-tests"
  cat > "$working_dir/file-tests/commands.yml" <<-EOF
command: stop
org: $org
space: $space
app_name: $app_name
EOF

  local params=$(jq -n \
  --arg command_file "file-tests/commands.yml" \
  '{
    command: "invalid-XXXXXX",
    command_file: $command_file
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_is_app_stopped "$app_name"
}

it_can_delete_an_app_with_file() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  mkdir "$working_dir/file-tests"
  cat > "$working_dir/file-tests/commands.yml" <<-EOF
command: delete
org: $org
space: $space
app_name: $app_name
delete_mapped_routes: true
EOF

  local params=$(jq -n \
  --arg command_file "file-tests/commands.yml" \
  '{
    command: "invalid-XXXXXX",
    command_file: $command_file
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::failure cf_app_exists "$app_name"
}

it_can_create_an_org_with_file() {
  local org=${1:?org null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  mkdir "$working_dir/file-tests"
  cat > "$working_dir/file-tests/commands.yml" <<-EOF
command: create-org
org: $org
EOF

  local params=$(jq -n \
  --arg command_file "file-tests/commands.yml" \
  '{
    command: "invalid-XXXXXX",
    command_file: $command_file
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_org_exists "$org"
}

it_can_create_a_space_with_file() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  mkdir "$working_dir/file-tests"
  cat > "$working_dir/file-tests/commands.yml" <<-EOF
command: create-space
org: $org
space: $space
EOF

  local params=$(jq -n \
  --arg command_file "file-tests/commands.yml" \
  '{
    command: "invalid-XXXXXX",
    command_file: $command_file
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_space_exists "$org" "$space"
}

# This test showcases the multi-command syntax
it_can_delete_a_space_and_org_with_file() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  mkdir "$working_dir/file-tests"
  cat > "$working_dir/file-tests/commands.yml" <<-EOF
commands:
- command: delete-space
  org: $org
  space: $space
- command: delete-org
  org: $org
EOF

  local params=$(jq -n \
  --arg command_file "file-tests/commands.yml" \
  '{
    command: "invalid-XXXXXX",
    command_file: $command_file
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::failure cf_space_exists "$org" "$space"
  assert::failure cf_org_exists "$org"
}

setup_integration_tests_with_file() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}

  run it_can_create_an_org_with_file \"$org\"
  run it_can_create_a_space_with_file \"$org\" \"$space\"
}

teardown_integration_tests_with_file() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}

  run it_can_delete_a_space_and_org_with_file \"$org\" \"$space\"
}

org=$(generate_test_name_with_spaces "Org")
space=$(generate_test_name_with_spaces "Space")
app_name=$(generate_test_name_with_spaces "App")

setup_integration_tests_with_file "$org" "$space"

run it_can_push_an_app_no_start_with_file \"$org\" \"$space\" \"$app_name\"
run it_can_start_an_app_with_file \"$org\" \"$space\" \"$app_name\"
run it_can_stop_an_app_with_file \"$org\" \"$space\" \"$app_name\"
run it_can_delete_an_app_with_file \"$org\" \"$space\" \"$app_name\"

teardown_integration_tests_with_file "$org" "$space"
