#!/bin/bash

set -eu
set -o pipefail

test_dir=$(dirname $0)

source $test_dir/assert.sh
source $test_dir/helpers.sh
source $test_dir/config.sh

it_can_create_an_org_with_file() {
  local org=${1:?org null or not set}

  local project=$(create_org_commands_file "$org")

  local params=$(jq -n \
  --arg command_file "$project/commands.yml" \
  '{
    command: "invalid-XXXXXX",
    command_file: $command_file
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::org_exists "$org"
}

it_can_create_a_space_with_file() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}

  local project=$(create_space_commands_file "$org" "$space")

  local params=$(jq -n \
  --arg command_file "$project/commands.yml" \
  '{
    command: "invalid-XXXXXX",
    command_file: $command_file
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::space_exists "$org" "$space"
}

it_can_delete_a_space_and_org_with_file() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}

  local project=$(create_delete_commands_file "$org" "$space")

  local params=$(jq -n \
  --arg command_file "$project/commands.yml" \
  '{
    command: "invalid-XXXXXX",
    command_file: $command_file
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::failure cf::space_exists "$org" "$space"
  assert::failure cf::org_exists "$org"
}

org=$(generate_test_name_with_spaces "Org")
space=$(generate_test_name_with_spaces "Space")
app_name=$(generate_test_name_with_spaces "App")

run it_can_create_an_org_with_file \"$org\"
run it_can_create_a_space_with_file \"$org\" \"$space\"

run it_can_delete_a_space_and_org_with_file \"$org\" \"$space\"
