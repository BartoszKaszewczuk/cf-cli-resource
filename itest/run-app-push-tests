#!/bin/bash

set -eu
set -o pipefail

test_dir=$(dirname $0)

source $test_dir/assert.sh
source $test_dir/helpers.sh
source $test_dir/config.sh

it_can_push_an_app_with_startup_command() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  create_static_app "$app_name" "$working_dir"

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg app_name "$app_name" \
  '{
    command: "push",
    org: $org,
    space: $space,
    app_name: $app_name,
    path: "static-app/content",
    manifest: "static-app/manifest.yml",
    staging_timeout: 15,
    startup_timeout: 5
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  echo "push with default default command"; {
    put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'
    assert::success cf_is_app_started "$app_name"
  }

  local default_startup_command=$(cf_get_app_startup_command "$app_name")
  local custom_startup_command='$HOME/boot.sh --dummy-flag'

  echo "push with custom startup command"; {
    config=$(echo $config | jq --arg startup_command "$custom_startup_command" '.params.startup_command = $startup_command')
    put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

    assert::success cf_is_app_started "$app_name"
    assert::equals "$custom_startup_command" "$(cf_get_app_startup_command "$app_name")"
  }

  echo "push and reset to default startup command"; {
    config=$(echo $config | jq --arg startup_command "null" '.params.startup_command = $startup_command')
    put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

    assert::success cf_is_app_started "$app_name"
    assert::equals "$default_startup_command" "$(cf_get_app_startup_command "$app_name")"
  }
}

org=$(generate_test_name_with_spaces "Org")
space=$(generate_test_name_with_spaces "Space")
app_name=$(generate_test_name_with_spaces "App")

setup_integration_tests "$org" "$space"

run it_can_push_an_app_with_startup_command \"$org\" \"$space\" \"$app_name\"

run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"

teardown_integration_tests "$org" "$space"
