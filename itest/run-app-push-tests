#!/bin/bash

set -eu
set -o pipefail

base_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)

source "$base_dir/itest/lib/assert.sh"
source "$base_dir/itest/lib/helpers.sh"
source "$base_dir/itest/lib/config.sh"

it_can_push_an_app_with_startup_command() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local project=$(create_static_app "$app_name")

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg path "$project/content" \
  --arg manifest "$project/manifest.yml" \
  '{
    command: "push",
    org: $org,
    space: $space,
    app_name: $app_name,
    path: $path,
    manifest: $manifest,
    staging_timeout: 15,
    startup_timeout: 5
  }')

  describe "push with default default command"
  {
    put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'
    assert::success cf::is_app_started "$app_name"
  }

  local default_startup_command=$(cf::get_app_startup_command "$app_name")
  local custom_startup_command='$HOME/boot.sh --dummy-flag'

  describe "push with custom startup command"
  {
    params=$(echo $params | jq --arg startup_command "$custom_startup_command" '.startup_command = $startup_command')
    put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

    assert::success cf::is_app_started "$app_name"
    assert::equals "$custom_startup_command" "$(cf::get_app_startup_command "$app_name")"
  }

  describe "push and reset to default startup command"
  {
    params=$(echo $params | jq --arg startup_command "null" '.startup_command = $startup_command')
    put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

    assert::success cf::is_app_started "$app_name"
    assert::equals "$default_startup_command" "$(cf::get_app_startup_command "$app_name")"
  }
}

it_can_push_an_app_with_vars() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local project=$(create_static_app_with_vars "$app_name")

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg path "$project/content" \
  --arg manifest "$project/manifest.yml" \
  '{
    command: "push",
    org: $org,
    space: $space,
    app_name: $app_name,
    path: $path,
    manifest: $manifest,
    vars: { instances: 2, memory: "96M" }
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::is_app_started "$app_name"
  assert::equals 2 "$(cf::get_app_instances "$app_name")"
  assert::equals 96 "$(cf::get_app_memory "$app_name")"
}

it_can_push_an_app_with_vars_files() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local project=$(create_static_app_with_vars "$app_name")

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg path "$project/content" \
  --arg manifest "$project/manifest.yml" \
  --arg vars_file1 "$project/vars-file1.yml" \
  --arg vars_file2 "$project/vars-file2.yml" \
  '{
    command: "push",
    org: $org,
    space: $space,
    app_name: $app_name,
    path: $path,
    manifest: $manifest,
    vars_files: [ $vars_file1, $vars_file2 ]
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::is_app_started "$app_name"
  assert::equals 1 "$(cf::get_app_instances "$app_name")"
  assert::equals 64 "$(cf::get_app_memory "$app_name")"
}

it_can_push_an_app_with_stack() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}
  local stack=${4:?stack null or not set}

  local project=$(create_static_app "$app_name")

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg stack "$stack" \
  --arg path "$project/content" \
  --arg manifest "$project/manifest.yml" \
  '{
    command: "push",
    org: $org,
    space: $space,
    app_name: $app_name,
    path: $path,
    manifest: $manifest,
    stack: $stack
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::is_app_started "$app_name"
  assert::equals "$stack" "$(cf::get_app_stack "$app_name")"
}

org=$(generate_test_name_with_spaces "Org")
space=$(generate_test_name_with_spaces "Space")
app_name=$(generate_test_name_with_spaces "App")
stack=cflinuxfs3

setup_integration_tests "$org" "$space"

run it_can_push_an_app_with_startup_command \"$org\" \"$space\" \"$app_name\"

run it_can_push_an_app_with_vars \"$org\" \"$space\" \"$app_name\"
run it_can_push_an_app_with_vars_files \"$org\" \"$space\" \"$app_name\"

run it_can_push_an_app_with_stack \"$org\" \"$space\" \"$app_name\" \"$stack\"

run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"

teardown_integration_tests "$org" "$space"
