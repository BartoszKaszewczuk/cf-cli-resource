#!/bin/bash

set -eu
set -o pipefail

test_dir=$(dirname $0)

source $test_dir/assert.sh
source $test_dir/helpers.sh
source $test_dir/config.sh

it_can_delete_a_buildpack() {
  local buildpack=${1:?buildpack null or not set}

  local params=$(jq -n \
  --arg buildpack "$buildpack" \
  '{
    command: "delete-buildpack",
    buildpack: $buildpack,
  }')

  put_with_params "$source" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::failure cf_has_buildpack "$buildpack"
}

it_can_delete_a_buildpack_with_stack() {
  local buildpack=${1:?buildpack null or not set}
  local stack=${2:?stack null or not set}

  local params=$(jq -n \
  --arg buildpack "$buildpack" \
  --arg stack "$stack" \
  '{
    command: "delete-buildpack",
    buildpack: $buildpack,
    stack: $stack
  }')

  put_with_params "$source" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::failure cf_has_buildpack "$buildpack"
}

it_can_create_a_buildpack() {
  local buildpack=${1:?buildpack null or not set}
  local path=${2:?path null or not set}

  local params=$(jq -n \
  --arg buildpack "$buildpack" \
  --arg path "$path" \
  '{
    command: "create-buildpack",
    buildpack: $buildpack,
    path: $path,
    position: 99
  }')

  put_with_params "$source" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_has_buildpack "$buildpack"
  assert::success cf_is_buildpack_enabled "$buildpack"
}

it_can_create_a_buildpack_that_is_enabled() {
  local buildpack=${1:?buildpack null or not set}
  local path=${2:?path null or not set}

  local params=$(jq -n \
  --arg buildpack "$buildpack" \
  --arg path "$path" \
  '{
    command: "create-buildpack",
    buildpack: $buildpack,
    path: $path,
    position: 99,
    enabled: "true"
  }')

  put_with_params "$source" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_has_buildpack "$buildpack"
  assert::success cf_is_buildpack_enabled "$buildpack"
}

it_can_create_a_buildpack_that_is_disabled() {
  local buildpack=${1:?buildpack null or not set}
  local path=${2:?path null or not set}

  local params=$(jq -n \
  --arg buildpack "$buildpack" \
  --arg path "$path" \
  '{
    command: "create-buildpack",
    buildpack: $buildpack,
    path: $path,
    position: 99,
    enabled: "false"
  }')

  put_with_params "$source" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_has_buildpack "$buildpack"
  assert::failure cf_is_buildpack_enabled "$buildpack"
}

it_can_disable_a_buildpack() {
  local buildpack=${1:?buildpack null or not set}

  local params=$(jq -n \
  --arg buildpack "$buildpack" \
  '{
    command: "update-buildpack",
    buildpack: $buildpack,
    enabled: "false"
  }')

  put_with_params "$source" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::failure cf_is_buildpack_enabled "$buildpack"
}

it_can_enable_a_buildpack() {
  local buildpack=${1:?buildpack null or not set}

  local params=$(jq -n \
  --arg buildpack "$buildpack" \
  '{
    command: "update-buildpack",
    buildpack: $buildpack,
    enabled: "true"
  }')

  put_with_params "$source" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_is_buildpack_enabled "$buildpack"
}

it_can_lock_a_buildpack() {
  local buildpack=${1:?buildpack null or not set}

  local params=$(jq -n \
  --arg buildpack "$buildpack" \
  '{
    command: "update-buildpack",
    buildpack: $buildpack,
    locked: "true"
  }')

  put_with_params "$source" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_is_buildpack_locked "$buildpack"
}

it_can_unlock_a_buildpack() {
  local buildpack=${1:?buildpack null or not set}

  local params=$(jq -n \
  --arg buildpack "$buildpack" \
  '{
    command: "update-buildpack",
    buildpack: $buildpack,
    locked: "false"
  }')

  put_with_params "$source" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::failure cf_is_buildpack_locked "$buildpack"
}

it_can_assign_a_stack_to_a_buildpack() {
  local buildpack=${1:?buildpack null or not set}
  local stack=${2:?stack null or not set}

  local params=$(jq -n \
  --arg buildpack "$buildpack" \
  --arg stack "$stack" \
  '{
    command: "update-buildpack",
    buildpack: $buildpack,
    assign_stack: $stack
  }')

  put_with_params "$source" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::equals "$stack" "$(cf_get_buildpack_stack "$buildpack")"
}

it_can_update_a_buildpack_path() {
  local buildpack=${1:?buildpack null or not set}
  local path=${2:?path null or not set}

  local params=$(jq -n \
  --arg buildpack "$buildpack" \
  --arg path "$path" \
  '{
    command: "update-buildpack",
    buildpack: $buildpack,
    path: $path
  }')

  put_with_params "$source" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::equals "$(basename "$updated_path")" "$(cf_get_buildpack_filename "$buildpack")"
}

it_can_update_a_buildpack_position() {
  local buildpack=${1:?buildpack null or not set}
  local position=${2:?position null or not set}

  local params=$(jq -n \
  --arg buildpack "$buildpack" \
  --arg position "$position" \
  '{
    command: "update-buildpack",
    buildpack: $buildpack,
    position: $position
  }')

  put_with_params "$source" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::equals "$position" "$(cf_get_buildpack_position "$buildpack")"
}

path="https://github.com/cloudfoundry/java-buildpack/releases/download/v4.18/java-buildpack-v4.18.zip"
updated_path="https://github.com/cloudfoundry/java-buildpack/releases/download/v4.19.1/java-buildpack-v4.19.1.zip"

describe "it_can_create_and_disable_a_buildpack"
{
  buildpack=$(generate_test_name_with_hyphens "buildpack")

  run it_can_create_a_buildpack_that_is_enabled \"$buildpack\" \"$path\"
  run it_can_disable_a_buildpack \"$buildpack\"
  run it_can_delete_a_buildpack \"$buildpack\"
}

describe "it_can_create_and_enable_a_buildpack"
{
  buildpack=$(generate_test_name_with_hyphens "buildpack")

  run it_can_create_a_buildpack_that_is_disabled \"$buildpack\" \"$path\"
  run it_can_enable_a_buildpack \"$buildpack\"
  run it_can_delete_a_buildpack \"$buildpack\"
}

describe "it_can_create_and_lock_and_unlock_a_buildpack"
{
  buildpack=$(generate_test_name_with_hyphens "buildpack")

  run it_can_create_a_buildpack \"$buildpack\" \"$path\"
  run it_can_lock_a_buildpack \"$buildpack\"
  run it_can_unlock_a_buildpack \"$buildpack\"
  run it_can_delete_a_buildpack \"$buildpack\"
}

describe "it_can_create_and_assign_a_stack_to_a_buildpack"
{
  buildpack=$(generate_test_name_with_hyphens "buildpack")

  run it_can_create_a_buildpack \"$buildpack\" \"$path\"
  run it_can_assign_a_stack_to_a_buildpack \"$buildpack\" \"cflinuxfs3\"
  run it_can_delete_a_buildpack_with_stack \"$buildpack\" \"cflinuxfs3\"
}

describe "it_can_create_and_update_a_buildpack_path"
{
  buildpack=$(generate_test_name_with_hyphens "buildpack")

  run it_can_create_a_buildpack \"$buildpack\" \"$path\"
  run it_can_update_a_buildpack_path \"$buildpack\" \"$updated_path\"
  run it_can_delete_a_buildpack \"$buildpack\"
}

describe "it_can_create_two_buildpacks_and_swap_their_positions"
{
  buildpack_1=$(generate_test_name_with_hyphens "buildpack_1")
  run it_can_create_a_buildpack \"$buildpack_1\" \"$path\"

  position_1=$(cf_get_buildpack_position "$buildpack_1")
  assert::equals "$(cf_get_buildpack_max_position)" "$position_1"

  buildpack_2=$(generate_test_name_with_hyphens "buildpack_2")
  run it_can_create_a_buildpack \"$buildpack_2\" \"$path\"

  position_2=$(cf_get_buildpack_position "$buildpack_2")
  assert::equals "$(cf_get_buildpack_max_position)" "$position_2"

  run it_can_update_a_buildpack_position \"$buildpack_2\" \"$position_1\"

  assert::equals "$position_1" "$(cf_get_buildpack_position "$buildpack_2")"
  assert::equals "$position_2" "$(cf_get_buildpack_position "$buildpack_1")"

  run it_can_delete_a_buildpack \"$buildpack_2\"
  run it_can_delete_a_buildpack \"$buildpack_1\"
}
