#!/bin/bash

set -eu
set -o pipefail

test_dir=$(dirname $0)

source $test_dir/assert.sh
source $test_dir/helpers.sh
source $test_dir/config.sh

it_can_create_a_user_with_password() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg username "$3" \
  --arg password "$4" \
  '{
    command: "create-user",
    org: $org,
    space: $space,
    username: $username,
    password: $password
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::success cf_user_exists "$3"
}

it_can_create_a_user_with_origin() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg username "$3" \
  --arg origin "$4" \
  '{
    command: "create-user",
    org: $org,
    space: $space,
    username: $username,
    origin: $origin
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::success cf_user_exists "$3" "$4"
}

it_can_create_users_from_file() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  mkdir -p $working_dir/input

  cat << EOF > $working_dir/input/users.csv
Username,Password,Org,Space,OrgManager,BillingManager,OrgAuditor,SpaceManager,SpaceDeveloper,SpaceAuditor
$testprefix-bulkload-user1,wasabi,$1,$2,x,x,x,x,x,x
$testprefix-bulkload-user2,wasabi,$1,$2,,x,x,,x,x
$testprefix-bulkload-user3,ldap,$1,$2,,,x,,,x
EOF

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  '{
    command: "create-users-from-file",
    org: $org,
    space: $space,
    file: "input/users.csv"
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::success cf_user_exists "$testprefix-bulkload-user1"
  assert::success cf_user_exists "$testprefix-bulkload-user2"
  assert::success cf_user_exists "$testprefix-bulkload-user3"
}

it_can_delete_a_user_with_origin() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg username "$3" \
  '{
    command: "delete-user",
    org: $org,
    space: $space,
    username: $username
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::failure cf_user_exists "$3"
}

it_can_delete_a_user_with_password() {
  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$1" \
  --arg space "$2" \
  --arg username "$3" \
  '{
    command: "delete-user",
    org: $org,
    space: $space,
    username: $username
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  put_with_params "$config" "$working_dir" | jq -e '
    .version | keys == ["timestamp"]
  '

  assert::failure cf_user_exists "$3"
}

org=$(generate_org_name)
space=$(generate_space_name)

username="$testprefix-user-$timestamp"
password=$testprefix-pass-$timestamp
origin_username=$testprefix-originuser-$timestamp
origin=sso

setup_integration_tests "$org" "$space"

run it_can_create_a_user_with_password \"$org\" \"$space\" \"$username\" \"$password\"
run it_can_create_a_user_with_origin \"$org\" \"$space\" \"$origin_username\" \"$origin\"
run it_can_create_users_from_file \"$org\" \"$space\"

run it_can_delete_a_user_with_origin \"$org\" \"$space\" \"$origin_username\"
run it_can_delete_a_user_with_password \"$org\" \"$space\" \"$username\"

teardown_integration_tests "$org" "$space"
