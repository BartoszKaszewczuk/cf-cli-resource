#!/bin/bash

set -eu
set -o pipefail

test_dir=$(dirname $0)

source $test_dir/config.sh
source $test_dir/helpers.sh
source $test_dir/assert.sh

it_can_create_a_service_broker_space_scoped() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local commit=dddec578676b8dcbe06158e3ac0b34edc6f5de6e

  # if tests are running in concourse, the overview-broker.zip is provided
  # by the pipeline.  Otherwise, if we are running locally, we'll need to
  # download it.
  local broker_dir=$working_dir/broker
  if [ -d "/opt/service-broker" ]; then
    broker_dir=/opt/service-broker
  else
    mkdir -p $broker_dir
  fi

  if [ ! -f "$broker_dir/overview-broker.zip" ]; then
    wget https://github.com/mattmcneeney/overview-broker/archive/$commit.zip -O $broker_dir/overview-broker.zip
  fi

  if [ ! -d "$broker_dir/overview-broker-$commit" ]; then
    unzip $broker_dir/overview-broker.zip -d $broker_dir
  fi

  cf_api "$cf_api" "$cf_skip_cert_check"
  cf_auth_user "$cf_username" "$cf_password"
  cf_target "$org" "$space"
  cf push "$app_name" -p "$broker_dir/overview-broker-$commit" #-b "https://github.com/cloudfoundry/nodejs-buildpack#v1.6.11"
  cf logout

  local params=$(jq -n \
    --arg org "$org" \
    --arg space "$space" \
    --arg service_broker "$app_name" \
    --arg username admin \
    --arg password password \
    --arg url "https://$(app_to_hostname "$app_name").$cf_apps_domain" \
    '{
      command: "create-service-broker",
      org: $org,
      space: $space,
      service_broker: $service_broker,
      username: $username,
      password: $password,
      url: $url,
      space_scoped: true
    }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_service_broker_exists "$app_name"
}

it_can_create_a_service_broker() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local commit=dddec578676b8dcbe06158e3ac0b34edc6f5de6e

  # if tests are running in concourse, the overview-broker.zip is provided
  # by the pipeline.  Otherwise, if we are running locally, we'll need to
  # download it.
  local broker_dir=$working_dir/broker
  if [ -d "/opt/service-broker" ]; then
    broker_dir=/opt/service-broker
  else
    mkdir -p $broker_dir
  fi

  if [ ! -f "$broker_dir/overview-broker.zip" ]; then
    wget https://github.com/mattmcneeney/overview-broker/archive/$commit.zip -O $broker_dir/overview-broker.zip
  fi

  if [ ! -d "$broker_dir/overview-broker-$commit" ]; then
    unzip $broker_dir/overview-broker.zip -d $broker_dir
  fi

  cf_api "$cf_api" "$cf_skip_cert_check"
  cf_auth_user "$cf_username" "$cf_password"
  cf_target "$org" "$space"
  cf push "$broker_name" -p "$broker_dir/overview-broker-$commit"
  cf logout

  local params=$(jq -n \
    --arg service_broker "$app_name" \
    --arg username admin \
    --arg password password \
    --arg url "https://$(app_to_hostname "$app_name").$cf_apps_domain" \
    '{
      command: "create-service-broker",
      service_broker: $service_broker,
      username: $username,
      password: $password,
      url: $url
    }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_service_broker_exists "$app_name"
}

it_can_enable_service_access() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local params=$(jq -n \
    --arg service_broker "$app_name" \
    --arg plan "${4:-}" \
    --arg access_org "${5:-}" \
    '{
      command: "enable-service-access",
      service_broker: $service_broker,
      plan: $plan,
      access_org: $access_org
    }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" | jq -e '.version | keys == ["timestamp"]'

  cf_target "$org" "$space"
  assert::success cf_is_marketplace_service_available "$app_name" "${4:-}"
}

it_can_disable_service_access() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local plan="simple"
  local params=$(jq -n \
    --arg service_broker "$app_name" \
    --arg plan "${4:-}" \
    --arg access_org "${5:-}" \
    '{
      command: "disable-service-access",
      service_broker: $service_broker,
      plan: $plan,
      access_org: $access_org
    }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" | jq -e '.version | keys == ["timestamp"]'

  cf_target "$org" "$space"
  assert::failure cf_is_marketplace_service_available "$app_name" "${4:-}"
}

it_can_delete_a_service_broker() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local params=$(jq -n \
    --arg org "$org" \
    --arg space "$space" \
    --arg service_broker "$app_name" \
    '{
      command: "delete-service-broker",
      org: $org,
      space: $space,
      service_broker: $service_broker
    }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" | jq -e '.version | keys == ["timestamp"]'

  assert::failure cf_service_broker_exists "$app_name"
}

org=$(generate_test_name_with_spaces "Org")
space=$(generate_test_name_with_spaces "Space")

broker_space_scoped_name=$(generate_test_name_with_spaces "Space Scoped Broker")
broker_name=$(generate_test_name_with_spaces "Broker")

setup_integration_tests "$org" "$space"

run it_can_create_a_service_broker \"$org\" \"$space\" \"$broker_name\"

run it_can_disable_service_access \"$org\" \"$space\" \"$broker_name\"

run it_can_enable_service_access \"$org\" \"$space\" \"$broker_name\" \"\" \"$org\"
run it_can_disable_service_access \"$org\" \"$space\" \"$broker_name\" \"\" \"$org\"

run it_can_enable_service_access \"$org\" \"$space\" \"$broker_name\" \"complex\" \"$org\"
run it_can_disable_service_access \"$org\" \"$space\" \"$broker_name\" \"complex\" \"$org\"

run it_can_enable_service_access \"$org\" \"$space\" \"$broker_name\"

run it_can_delete_a_service_broker \"$org\" \"$space\" \"$broker_name\"

# space scoped services aren't affected by enable/disable-service-access so we just test create and delete
run it_can_create_a_service_broker_space_scoped \"$org\" \"$space\" \"$broker_space_scoped_name\"
run it_can_delete_a_service_broker \"$org\" \"$space\" \"$broker_space_scoped_name\"

teardown_integration_tests "$org" "$space"
